# -*- coding: utf-8 -*-
"""img2txt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqBoExizEkAB8oMYKX_ANBNiHWCrW8jz
"""

!pip install transformers

import cv2
import matplotlib.pyplot as plt
import matplotlib.image as img
img = img.imread('/content/home2.jpeg')
plt.imshow(img)

from transformers import VisionEncoderDecoderModel, ViTImageProcessor, AutoTokenizer
import torch
from PIL import Image

model = VisionEncoderDecoderModel.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
feature_extractor = ViTImageProcessor.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
tokenizer = AutoTokenizer.from_pretrained("nlpconnect/vit-gpt2-image-captioning")

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)



max_length = 16
num_beams = 4

gen_kwargs = {"max_length": max_length, "num_beams": num_beams}

pip install pygobject

from gtts import gTTS
import playsound as ps
import os
speech = gTTS("hello guys")
speech.save('speech.mp3')
os.startfile('/content/speech.mp3')

import time
from PIL import Image as ig

def predict_step(image_paths):
  images = []
  for image_path in image_paths:
    i_image = Image.open(image_path)
    if i_image.mode != "RGB":
      i_image = i_image.convert(mode="RGB")

    images.append(i_image)

  pixel_values = feature_extractor(images=images, return_tensors="pt").pixel_values
  pixel_values = pixel_values.to(device)

  output_ids = model.generate(pixel_values, **gen_kwargs)

  preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)
  preds = [pred.strip() for pred in preds]
  return preds

# cap = cv2.VideoCapture('home.mp4')
# res = []
# while True :
#   ret , frame = cap.read()
#   if ret :
#     # timeend = time.time()+60*3
#     # if time.time()<timeend:
#     #   break
#     # else :
#       data = ig.fromarray(frame)
#       data.save('dummy.jpeg')
#       print(predict_step(['dummy.jpeg']))
#   else :
#     break
# ['a woman in a hospital bed with a woman in a hospital bed']
predict_step(['home2.jpeg'])

"""speech recognition

"""



import speech_recognition
import pyttsx3

recog = speech_recognition.Recognizer()
while True :
  try :
    with speech_recognition.Microphone() as mic :
      recog.adjust_for_ambient_noise(mic,duration=0.2)
      audio = recog.listen()
      text = recog.recognize_google(audio)
      text = text.lower()
  except :
    recog = speech_recognition.Recognizer()
    continue

pip install ultralytics

from ultralytics import YOLO

model = YOLO('yolov8n.pt')
resluts = model()